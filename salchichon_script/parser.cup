package salchichon_script;

import java_cup.runtime.Symbol;

// PARSER
parser code
{:

    // Errores recuperables
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Línea "+(s.left+1)+" Columna "+(s.right+1) );
    }

    // Errores no recuperables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        System.out.println("Error NR de sintaxis: " + s.value + " Línea " + (s.left+1) + " Columna " + (s.right+1));
    }
:}

action code
{:
    // Codigo de usuario - fase de analisis
    String tmp="";
:}

// TERMINALES
terminal PAR_A, PAR_C, BLO_A, BLO_C, COMA, FLECHA, FIN_E, ASIGN;
terminal MAS, MENOS, POR, DIV, DIV_ENT, MOD, POT;
terminal AND, OR, NOT;
terminal INC, DEC;
terminal MAYOR, MENOR, MAY_IGU, MEN_IGU, IGUAL, DIF;
terminal INT1, CHAR1, STR1, FLOAT1, BOOL1, LET, VOID, TRUE1, FALSE1, DECIDE;
terminal OF, ELSE, END, LOOP, EXIT, WHEN, FOR1, STEP, TO, DOWNTO, DO;
terminal RETURN, BREAK;
terminal OUTPUT, INPUT;

terminal ENTERO, DECIMALES, FLOTANTE, CHAR, ID, SPACE, ENTER, FIN_L, INPUT1, COM_S, COM_C, COMENTARIO;
terminal MAIN, CADENA;

// NO TERMINALES
non terminal bloque, lista_sentencias, lista_sentencias_opt, sentencia;
non terminal Object program;
non terminal main_function, global_section;
non terminal tipo, declaracion;
non terminal asignacion, asignacion_dec;
non terminal expresion;
non terminal expresion_arit, termino, factor, potencia, operando, elem_arr, llamada_funcion;
non terminal op_rel, expresion_rel, expresion_log;

// PRECEDENCIA
precedence left OR;
precedence left AND;
precedence left IGUAL, DIF;
precedence left MAYOR, MENOR, MAY_IGU, MEN_IGU;
precedence left MAS, MENOS;
precedence left POR, DIV, DIV_ENT, MOD;
precedence right POT;
precedence right NOT;

// PRODUCCIONES

//+++++++++++++++++++++BLOQUE++++++++++++++++++++++++++++++++++

bloque ::= BLO_A lista_sentencias_opt BLO_C;

lista_sentencias_opt ::= /* vacío */
                     | lista_sentencias
                     ;

lista_sentencias ::= sentencia
                  | lista_sentencias sentencia
                  ;
sentencia ::= declaracion FIN_E
            | asignacion FIN_E
            | llamada_funcion FIN_E
            | imprimir FIN_E            /* NO EXISTE EN EL LEXER PALABRA RESERVDA PRINT DEBEN IR EN MAYUSCULA PORQUE SON TERMINALES*/
            | leer FIN_E                /* NO EXISTE EN EL LEXER PALABRA RESERVADA READ */
            | RETURN expresion FIN_E
            | BREAK FIN_E
            ;

//+++++++++++++++++++++FUNCIONES++++++++++++++++++++++++++++++++

funcion ::= tipo ID PAR_A parametros_opt PAR_C bloque;

parametros_opt ::= /* vacío */
                 | listaParametros
                 ;

listaParametros ::= parametro //LISTA DE PARAMETROS ES UN PARAMETRO O LISTA DE PARAMETROS SEGUIDO DE UNA COMA Y UN PARAMETRO
                  | listaParametros COMA parametro
                  ;

parametro ::= tipo ID; //UN PARAMETRO ES UN TIPO SEGUIDO DE UN ID
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

start with program;


program ::= global_section main_function global_section
    ;

main_function ::= VOID MAIN PAR_A PAR_C BLO_A BLO_C FIN_E
    ;

global_section ::= declaracion global_section
    | asignacion global_section
    | // є
    ;

// ======== DECLARACIÓN DE VARIABLES ========
tipo ::= INT1
    | VOID
    | STR1
    | FLOAT1
    | BOOL1
    | CHAR1
    ;

declaracion ::= LET tipo ID asignacion_dec FIN_E
    ;

// ASIGNACION DE VARIABLES
asignacion_dec ::= ASIGN expresion
    | /* ε */
    ;

asignacion ::= ID ASIGN expresion FIN_E
    ;

// EXPRESIONES
expresion ::= expresion AND expresion
    | expresion OR expresion
    | NOT expresion
    | expresion_arit op_rel expresion_arit
    | expresion_arit
    ;


// EXPRESIONES ARITMETICAS
expresion_arit ::= expresion_arit MAS termino
    | expresion_arit MENOS termino
    | termino
    ;

termino ::= factor POR factor
    | factor DIV factor
    | factor DIV_ENT factor
    | factor MOD factor
    | factor
    ;

factor ::= potencia POT potencia
    | potencia
    ;

potencia ::= PAR_A expresion PAR_C
    | operando
    ;

operando ::= ENTERO
    | FLOTANTE
    | TRUE1
    | FALSE1
    | CHAR
    | CADENA
    | ID 
    | llamada_funcion
    | elem_arr
    | MENOS operando
    | INC
    | DEC
    ;

// OPERADORES RELACIONALES
op_rel ::= MAYOR
    | MENOR
    | MAY_IGU
    | MEN_IGU
    | IGUAL
    | DIF
    ;

// ESTRUCTURAS DE CONTROL